# TODO

# =============================================================================
# -----------------------------------------------------------------------------
# =============================================================================

- bootloader (stage-3):
	- parsing and loading kernel ELF binary
	- filling multiboot header using BIOS interruptions (unreal mode)

- memory:
	- setup paging / virtual memory
	- basic physical allocator

- serial:
	- handle asynchronous printing
	- optimize output
	- FIXME: bochs detects a 'com1: transmit FIFO overflow'

- ps2ctrl:
	- "uniformize" the send/receive/wait functions + clean/refactor *old* code
	- handle dual channel completely
	- document the driver model
	- PS/2 mouse can be tested with BOCHS (?)

- keyboard:
	- implement command state machine
	- export keyboard commands
	- protect keyboard commands against unstarted driver
	- translate scan code into key code (implement state machine)
	- handle US QWERTY key mapping
	- handle special (shift / ctrl / etc...)

- panic:
	- basic handler which reset halt the cpu
	- display register state
	- unwind the stack
		- build a symbol map ('ahos.symbol') file

- handle INTEL exceptions
	- disallow first page access to detect NULL pointer deref

- tty:
	- buffering
	- scrolling with keyboard

- kernel:
	- parse multiboot information
	- implement a basic synchronisation primitives (mutex/semaphore/spinlock?)
	- tasks / process
	- system call
	- userland
	- use an error value (integer) instead of 'boolean'

- libc:
	- strncpy()
	- strcmp()

- compilation
	- userland toolchain (hosted)

- build
	- make a top-level Makefile and remove unnecessary scripts

- re-order source code hierarchy (e.g. drivers/*)

# =============================================================================
# -----------------------------------------------------------------------------
# =============================================================================
